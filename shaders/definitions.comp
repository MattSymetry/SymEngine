#version 460
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (binding = 0, rgba8) uniform image2D colorBuffer; // frame image
layout(set = 0, binding = 2) uniform timeUniform {int myInt;} unscaledTime; // time
float time = float(unscaledTime.myInt) / 40.0;

struct NodeData {
    ivec4 data0;//childCount, childStart, operation, sceneID
    vec4 data1;// operatorGoop, padding[3]
    mat4 transform;
    mat4 obejctData;
    vec4 color;
};

layout(set = 0, binding = 3) uniform ObjectBuffer {
    NodeData nodes[];
} SceneNodes;
layout(set = 0, binding = 4) buffer selectedIdUniform {
    int selectedId;
};
struct Camera {
    vec3 position;
    vec3 forwards;
    vec3 right;
    vec3 up;
};

struct SDFData {
    vec4 data;
    int id;
};

layout(set = 0, binding = 1) uniform UBO {
    ivec2 mousePos;
    vec3 camera_position;
    vec3 camera_target;
    vec4 viewport;
    float camera_roll;
    float camera_fov;
    int sceneSize;
    vec4 backgroundColor;
    vec4 sunPos;
    float outlineTickness;
    vec4 outlineCol;
    int showGrid;
    int AA;
} SceneData;

float dot2( in vec2 v ) { return dot(v,v); }
float dot2( in vec3 v ) { return dot(v,v); }
float ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }
ivec2 screen_size = imageSize(colorBuffer);
ivec2 gi = ivec2(gl_GlobalInvocationID.xy);
ivec2 screen_pos = ivec2(gi.x + SceneData.viewport.x, gi.y + SceneData.viewport.y);

#define RX(X) mat3(1., 0., 0. ,0., cos(X), -sin(X) ,0., sin(X), cos(X))	//x axis rotation matrix
#define RY(X) mat3(cos(X), 0., sin(X),0., 1., 0.,-sin(X), 0., cos(X))	//y axis rotation matrix	
#define RZ(X) mat3(cos(X), -sin(X), 0.	,sin(X), cos(X), 0.	,0., 0., 1.)	//z axis rotation matrix
#define Rotate(X,Y,Z) RZ(Z)*RY(Y)*RX(X)	//x,y,z combined rotation
